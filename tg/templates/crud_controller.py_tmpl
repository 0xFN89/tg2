from ${package}.lib.base import Controller
from tg import expose, validate, flash, redirect
from ${package}.model import DBSession, ${modelname}, metadata
from ${modelnameLower}form import new_form, edit_form
import pylons

from dbsprockets.primitives import makeForm
from dbsprockets.saprovider import SAProvider

provider = SAProvider(metadata)

class ${modelpackage}(Controller):
    """Basic ${modelname} admin interface"""
    modelname    = '${modelname}'
    tablename    = '${modelnameLower}'
    
    @expose()
    def index(self):
        """handle front page"""
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.list")
    def list(self, **kw):
        """List records in model"""
        records = DBSession.query(${modelname}).all()
        return dict(records = records, modelname = self.modelname)

    @expose("genshi:${package}.templates.${modelpackageLower}.show")
    def show(self, ${id}, **kw):
        """Show record in model"""
        record = DBSession.query(${modelname}).get(int(id))
        return dict(record = record)

    @expose("genshi:${package}.templates.${modelpackageLower}.new_form")
    def new(self, **kw):
        """Form to add new record"""
        pylons.c.w.form = new_form
        return dict(modelname = self.modelname)

    @validate(new_form, error_handler=new)
    @expose()
    def create(self, ${id}=None, **kw):
        """Create record to model"""
        #try:
        #     entry = ${modelname}(**kw)
        #except:
        #    entry = ${modelname}() #if not mapped
        #    for attr in kw:
        #        setattr(entry, attr, kw[attr])
        #DBSession.save(entry)
        #DBSession.commit()
        provider.add(tableName=self.tablename, values=kw)
        flash("${modelname} was successfully created.")
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.edit_form")
    def edit(self, **kw):
        pylons.c.w.form = edit_form
        #try:
        #    record = DBSession.query(${modelname}).get(int(id))
        #except:
        #    flash("Not valid edit")
        value = {}
        pks = sorted(provider.getPrimaryKeys(self.tablename))
        if pks == sorted(kw.keys()):
            value = dict(provider.selectOnPks(self.tablename, values=kw)[0])
        else:
            value.update(kw)
        return dict(modelname = self.modelname, value=value)

    @validate(edit_form, error_handler=edit)
    @expose()
    def update(self, **kw):
        """Update record to model"""
        #record = DBSession.query(${modelname}).get(int(id))
        #for attr in kw:
        #    setattr(record, attr, kw[attr])
        #DBSession.commit()
        provider.edit(tableName=self.tablename, values=kw)
        flash("${modelname} was successfully updated.")
        raise redirect("list")

    @expose()
    def destroy(self, id):
        """Destroy record in model"""
        record = DBSession.query(${modelname}).get(int(id))
        DBSession.delete(record)
        DBSession.commit()
        flash("${modelname} was successfully destroyed.")
        raise redirect("list")
