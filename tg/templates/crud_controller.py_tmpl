from ${package}.lib.base import Controller
from tg import expose, validate, flash, redirect
from ${package}.model import DBSession, ${modelname}, metadata
from ${modelnameLower}form import new_form, edit_form
import pylons

from dbsprockets.primitives import makeForm, makeTable, getTableValue
from dbsprockets.saprovider import SAProvider
from cStringIO import StringIO
from genshi import HTML

provider = SAProvider(metadata)

def myMakeLinks(viewConfig, row):
    pks = viewConfig.metadata.primaryKeys()
    links = StringIO()
    links.write('<a href="show')
    links.write(viewConfig._writePKsToURL(pks, row))
    links.write('">show</a>|')
    links.write('<a href="edit')
    links.write(viewConfig._writePKsToURL(pks, row))
    links.write('">edit</a>|')
    links.write('<a href="destroy')
    links.write(viewConfig._writePKsToURL(pks, row))
    links.write('">delete</a>')
    return HTML(links.getvalue())

listing = makeTable(Movie, 'movies', makeLinks=myMakeLinks)


class ${modelpackage}(Controller):
    """Basic ${modelname} admin interface"""
    modelname    = '${modelname}'
    tablename    = '${modelnameLower}'
    
    @expose()
    def index(self):
        """handle front page"""
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.list")
    def list(self, **kw):
        """List records in model"""
        value = provider.select(tableName=self.tablename,values=kw)
        pylons.c.w.table = listing
        return dict(value=value, modelname=self.modelname)

    @expose("genshi:${package}.templates.${modelpackageLower}.show")
    def show(self, **kw):
        """Show record in model"""
        record = provider.selectOnPks(tableName=self.tablename,values=kw)[0]
        return dict(record = record)

    @expose("genshi:${package}.templates.${modelpackageLower}.new_form")
    def new(self, **kw):
        """Form to add new record"""
        pylons.c.w.form = new_form
        return dict(modelname = self.modelname)

    @validate(new_form, error_handler=new)
    @expose()
    def create(self, **kw):
        """Create record to model"""
        provider.add(tableName=self.tablename, values=kw)
        flash("${modelname} was successfully created.")
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.edit_form")
    def edit(self, **kw):
        pylons.c.w.form = edit_form
        value = {}
        pks = sorted(provider.getPrimaryKeys(self.tablename))
        if pks == sorted(kw.keys()):
            value = dict(provider.selectOnPks(self.tablename, values=kw)[0])
        else:
            value.update(kw)
        return dict(modelname = self.modelname, value=value)

    @validate(edit_form, error_handler=edit)
    @expose()
    def update(self, **kw):
        """Update record to model"""
        provider.edit(tableName=self.tablename, values=kw)
        flash("${modelname} was successfully updated.")
        raise redirect("list")

    @expose()
    def destroy(self, **kw):
        """Destroy record in model"""
        provider.delete(tableName=self.tablename, values=kw)
        flash("${modelname} was successfully destroyed.")
        raise redirect("list")
